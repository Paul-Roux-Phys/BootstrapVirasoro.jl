var documenterSearchIndex = {"docs":
[{"location":"conformalblocks/#Computing-conformal-blocks","page":"Conformal blocks","title":"Computing conformal blocks","text":"","category":"section"},{"location":"conformalblocks/","page":"Conformal blocks","title":"Conformal blocks","text":"The library uses the Zamolodchikov recursion to compute four-point conformal blocks on the sphere, and one-point conformal blocks on the torus. Because it is common in bootstrap computations to have to evaluate a given block at hundreds of positions, the library first creates a Block object which stores the coefficients of the block's series expansion, which can then be evaluated.","category":"page"},{"location":"conformalblocks/","page":"Conformal blocks","title":"Conformal blocks","text":"The library provides a hierarchy of conformal block types:","category":"page"},{"location":"conformalblocks/","page":"Conformal blocks","title":"Conformal blocks","text":"Block  (Abstract Type)\n├─ ChiralBlock\n├─ NonChiralBlock  (Abstract Type)\n│  ├─ Factorised block\n│  └─ LogBlock\n└─ LinearCombinationBlock","category":"page"},{"location":"conformalblocks/","page":"Conformal blocks","title":"Conformal blocks","text":"Defining and computing blocks requires defining a central charge, and conformal dimensions of the external and channel fields.","category":"page"},{"location":"conformalblocks/#BootstrapVirasoro.CentralCharge","page":"Conformal blocks","title":"BootstrapVirasoro.CentralCharge","text":"    CentralCharge(; β, c, B, b)\n\nCreate a CentralCharge object from one of the parameters  β c = 13 - 6 β^2 - 6 β^-2 b = i β B = b^2.\n\nAliased to CC.\n\nExamples\n\nc1 = CentralCharge(β=0.5+0.3im)\nc2 = CC(c=big\"0.4\")\nc2.c ≈ big\"0.4\" # access any of the parameters\n\n\n\n\n\n","category":"type"},{"location":"conformalblocks/#BootstrapVirasoro.ConformalDimension","page":"Conformal blocks","title":"BootstrapVirasoro.ConformalDimension","text":"    ConformalDimension(c::CC; Δ, δ, P, p, r, s)\n\nCreate a ConformalDimension object from one of the parameters  P p = iP δ = P^2  Δ = δ + fracc-124 or from Kac indices r, s (P_(r s) = frac12(rβ - sβ^-1)). The index r must be integer or rational, s can be arbitrary.\n\nAliased to CD.\n\nExamples\n\nc = CC(β = big\"0.3\"+big\"0.1\"*im)\nd1 = CD(c, P=big\"0.5\"*im)\nd2 = CD(c, r=2, s=1//2)\nd3 = CD(c, r=0, s=big\"0.1\")\nd2.r == 2 # true\n\n\n\n\n\n","category":"type"},{"location":"conformalblocks/#BootstrapVirasoro.Field","page":"Conformal blocks","title":"BootstrapVirasoro.Field","text":"    Field(c::CC; Δ, δ, P, p, r, s, diagonal)\n\nCreate a Field object from one of the parameters  P, p, δ, Δ (see ConformalDimension) or from Kac indices r, s. The index r must be integer or rational, s can be arbitrary. Left and right dimensions are accessed with [:left], [:right].\n\nExamples\n\nc = CC(β = big\"0.3\"+big\"0.1\"*im)\nV1 = Field(c, r=2, s=1//2) # non-diagonal, (Δ(2, 1//2), Δ(2, -1//2))\nV2 = Field(c, P=0.5)       # diagonal\nV3 = Field(c, r=1, s=2, diagonal=true) # degenerate\nV3[:left].Δ == V3[:right].Δ # true\n\n\n\n\n\n","category":"type"},{"location":"conformalblocks/","page":"Conformal blocks","title":"Conformal blocks","text":"The parameters of the external fields are stored in a Correlation object, that also stores the residues R_m n for each channel, and their sums ","category":"page"},{"location":"conformalblocks/","page":"Conformal blocks","title":"Conformal blocks","text":"C^N_mn = R_mnleft(delta_N-mn0 +\nsum_mnleq N-mn\nfracC^N-mn_mndelta_(m-n)-delta_(mn) right)","category":"page"},{"location":"conformalblocks/","page":"Conformal blocks","title":"Conformal blocks","text":"used in the Zamolodchikov recursion.","category":"page"},{"location":"conformalblocks/","page":"Conformal blocks","title":"Conformal blocks","text":"Correlation  (Abstract Type)\n├─ Correlation1  (Abstract Type)\n│  ├─ ChiralCorrelation1\n│  └─ NonChiralCorrelation1\n└─ Correlation4  (Abstract Type)\n   ├─ ChiralCorrelation4\n   └─ NonChiralCorrelation4","category":"page"},{"location":"conformalblocks/","page":"Conformal blocks","title":"Conformal blocks","text":"They are all created via a common interface ","category":"page"},{"location":"conformalblocks/#BootstrapVirasoro.Correlation","page":"Conformal blocks","title":"BootstrapVirasoro.Correlation","text":"    Correlation(fields, Δmax)\n\nCreate a Correlation object. The fields can be passed as single arguments or as tuples, and there can be 1 or 4 of them. The Correlation object stores residues R_m n and C^N_m n up to Δmax.\n\nAliased to Corr, Co.\n\nExamples\n\nc = CC(β = 0.5)\nV = Field(c, r=2, s=1//2)\nco1 = Correlation(V, V, V, V, 10) # NonChiralCorrelation4\nco2 = Corr(V, 10) # NonChiralCorrelation1\nco3 = Corr(Tuple(V[:left] for _ in 1:4), 20) # ChiralCorrelation4\nco3.fields[1] == V[:left]\n\n\n\n\n\n","category":"type"},{"location":"installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"To install this package, run","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"using Pkg; Pkg.add(\"https://github.com/Paul-Roux-Phys/BootstrapVirasoro.git\")","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"in a Julia script, or download the code from the repo, put it somewhere where Julia can see the BootstrapVirasoro module and do","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"julia> ]add BootstrapVirasoro","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"in a Julia REPL.","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"The module is then accessible via","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"using BootstrapVirasoro","category":"page"},{"location":"#BootstrapVirasoro.jl-documentation","page":"Home","title":"BootstrapVirasoro.jl documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is the documentation page for the BootstrapVirasoro package. BootstrapVirasoro is a package for doing bootstrap computations in theories with Virasoro symmetry.","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Installation\nComputing conformal blocks\nSolving bootstrap equations","category":"page"}]
}
